using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using i18n.Domain.Abstract;
using i18n.Domain.Entities;

namespace i18n.Domain.Concrete
{
	public class POTranslationRepository : ITranslationRepository
	{
		/// <summary>
		/// Retrieves a language queryable for use with LINQ.
		/// This does not take care of thread safety.
		/// </summary>
		/// <param name="tag">The languagetag to get the language for</param>
		/// <returns>Queryable translate items for use with LINQ</returns>
		public IQueryable<TranslateItem> GetLanguage(LanguageTag tag)
		{
			/*using (var fs = File.OpenText(path))
			{
				// http://www.gnu.org/s/hello/manual/gettext/PO-Files.html

				var messages = new ConcurrentDictionary<string, PoMessage>();
				string line;
				while ((line = fs.ReadLine()) != null)
				{
					if (line.StartsWith("#~"))
					{
						continue;
					}

					var message = new PoMessage();
					var sb = new StringBuilder();

					if (line.StartsWith("#"))
					{
						sb.Append(CleanCommentLine(line));
						while ((line = fs.ReadLine()) != null && line.StartsWith("#"))
						{
							sb.Append(CleanCommentLine(line));
						}
						message.Comment = sb.ToString();

						sb.Clear();
						ParseBody(fs, line, sb, message);

						// Only if a msgstr (translation) is provided for this entry do we add an entry to the cache.
						// This conditions facilitates more useful operation of the IsLanguageValid method,
						// which prior to this condition was indicating a language was available when in fact there
						// were zero translation in the PO file (it having been autogenerated during gettext merge).
						if (!string.IsNullOrWhiteSpace(message.MsgStr))
						{
							if (!messages.ContainsKey(message.MsgId))
							{
								messages[message.MsgId] = message;
							}
						}
					}
					else if (line.StartsWith("msgid"))
					{
						ParseBody(fs, line, sb, message);
					}
				}
			}*/
			return null;
		}

		public ConcurrentDictionary<string, TranslateItem> GetLanguageDictionary(LanguageTag tag)
		{
			throw new NotImplementedException();
		}

		public IEnumerable<Language> GetAvailableLanguages()
		{
			throw new NotImplementedException();
		}

		public bool TranslationExists(LanguageTag tag)
		{
			throw new NotImplementedException();
		}

		#region Path helpers

		private string GetPathForLanguage(LanguageTag tag)
		{
			return null;
		}

		#endregion
	}
}
